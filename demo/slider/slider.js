!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=4)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.defaultOptions={begin:null,end:null,range:!1,min:0,max:10,step:1,reverse:!1,length:"300px",vertical:!1,tooltip:!1,scale:!1}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=function(){function t(){this.listeners=[]}return t.prototype.subscribe=function(t){this.listeners.push(t)},t.prototype.notify=function(t){for(var e=0,i=this.listeners;e<i.length;e++){(0,i[e])(t)}},t}();e.Observable=s;var n=function(){function t(){this.listeners=[]}return t.prototype.subscribe=function(t){this.listeners.push(t)},t.prototype.notify=function(t,e){for(var i=0,s=this.listeners;i<s.length;i++){(0,s[i])(t,e)}},t}();e.ObservablePresenter=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isNumeric=function(t){return!isNaN(parseFloat(t))&&!isNaN(t-0)},e.deepEqual=function(t,e){return JSON.stringify(t)===JSON.stringify(e)},e.getNumberOfSteps=function(t,e,i){return Math.ceil((e-t)/i)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(2),n={valuesAreNotNumbers:"All values, instead of customValues, should be numbers",valuesAreNotInteger:"All values, instead of customValues, should be integer",minIsOverMax:"Min value should be less then max value",minIsEqualToMax:"Min value cant be equal to max value",beginIsIgnored:"If it is not range, options begin is ignored",beginIsOverEnd:"Begin value should be less then end value",tooBigStep:"Step should be less then difference of max and min values",stepIsNull:"Step cant be equal to 0",reverseIsNotBoolean:"Option reverse should be true or false",customValuesIsNotArray:"CustomValues should be array",customValuesIsTooSmall:"CustomValues should contain at least two values",invalidLength:"Length should be valid to CSS",verticalIsNotBoolean:"Option vertical should be true or false",tooltipIsNotBoolean:"Option tooltip should be true or false",scaleIsNotBoolean:"Option scale should be true or false"};e.validateModel=function(t){var e=t.begin,i=t.end,o=t.range,r=t.min,a=t.max,l=t.step,u=t.reverse,h=t.customValues,c={},d=[r,a,l];return e&&d.push(e),i&&d.push(i),function(t){var e=!0;return t.forEach(function(t){s.isNumeric(t)||(e=!1)}),e}(d)||(c.valuesAreNotNumbers=n.valuesAreNotNumbers),function(t){var e=!0;return t.forEach(function(t){t%1!=0&&(e=!1)}),e}(d)||(c.valuesAreNotInteger=n.valuesAreNotInteger),r>a&&(c.minIsOverMax=n.minIsOverMax),r==a&&(c.minIsEqualToMax=n.minIsEqualToMax),!o&&e&&(c.beginIsIgnored=n.beginIsIgnored),o&&e>i&&(c.beginIsOverEnd=n.beginIsOverEnd),Math.abs(a-r)<Math.abs(l)&&(c.tooBigStep=n.tooBigStep),0==l&&(c.stepIsNull=n.stepIsNull),"boolean"!=typeof u&&(c.reverseIsNotBoolean=n.reverseIsNotBoolean),h&&(Array.isArray(h)||(c.customValuesIsNotArray=n.customValuesIsNotArray),!c.customValuesIsNotArray&&h.length<2&&(c.customValuesIsTooSmall=n.customValuesIsTooSmall)),c},e.validateView=function(t){var e={},i=t.length,s=t.vertical,o=t.tooltip,r=t.scale;return i.match(/^\d{1,3}[.,]?\d*(px|em|rem|%|vh|vw)?$/i)||(e.invalidLength=n.invalidLength),"boolean"!=typeof s&&(e.verticalIsNotBoolean=n.verticalIsNotBoolean),"boolean"!=typeof o&&(e.tooltipIsNotBoolean=n.tooltipIsNotBoolean),"boolean"!=typeof r&&(e.scaleIsNotBoolean=n.scaleIsNotBoolean),e}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(0),n=i(5);!function(t){var e={init:function(e){return this.each(function(){var i=t(this),o=i.data("sliderData"),r=i;if(!o){e=t.extend({},s.defaultOptions,e);var a=new n.default(e,this);t(this).data("sliderData",{node:r,slider:a})}})},getData:function(){return t(this).data("sliderData").slider.getData()},update:function(e){return this.each(function(){t(this).data("sliderData").slider.update(e)})},destroy:function(){return this.each(function(){var e=t(this),i=e.data("sliderData");t(window).unbind(".slider"),i.node.remove(),e.removeData("sliderData")})},observe:function(e){t(this).data("sliderData").slider.subscribe(e)}};jQuery.fn.slider=function(i){return e[i]?e[i].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof i&&i?void t.error("Method called "+i+" does not exist for JQuery.slider"):e.init.apply(this,arguments)}}(jQuery),$(".test").slider({end:6,begin:2,step:9,tooltip:!0,scale:!0,range:!0,reverse:!0})},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(6);var s=i(0),n=i(9),o=i(10),r=i(11),a=function(){function t(t,e){t=Object.assign({},s.defaultOptions,t),this._model=new n.default(t),t=Object.assign(t,this._model.getOptions()),this._view=new o.default(t,e),this._presenter=new r.default(this._model,this._view)}return t.prototype.subscribe=function(t){this._presenter.subscribe(t)},t.prototype.update=function(t){this._presenter.update(t)},t}();e.default=a},function(t,e,i){var s=i(7),n=i(8);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var o={insert:"head",singleton:!1},r=(s(n,o),n.locals?n.locals:{});t.exports=r},function(t,e,i){"use strict";var s,n=function(){return void 0===s&&(s=Boolean(window&&document&&document.all&&!window.atob)),s},o=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),r=[];function a(t){for(var e=-1,i=0;i<r.length;i++)if(r[i].identifier===t){e=i;break}return e}function l(t,e){for(var i={},s=[],n=0;n<t.length;n++){var o=t[n],l=e.base?o[0]+e.base:o[0],u=i[l]||0,h="".concat(l," ").concat(u);i[l]=u+1;var c=a(h),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==c?(r[c].references++,r[c].updater(d)):r.push({identifier:h,updater:_(d,e),references:1}),s.push(h)}return s}function u(t){var e=document.createElement("style"),s=t.attributes||{};if(void 0===s.nonce){var n=i.nc;n&&(s.nonce=n)}if(Object.keys(s).forEach(function(t){e.setAttribute(t,s[t])}),"function"==typeof t.insert)t.insert(e);else{var r=o(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var h,c=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function d(t,e,i,s){var n=i?"":s.media?"@media ".concat(s.media," {").concat(s.css,"}"):s.css;if(t.styleSheet)t.styleSheet.cssText=c(e,n);else{var o=document.createTextNode(n),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(o,r[e]):t.appendChild(o)}}var p=null,f=0;function _(t,e){var i,s,n;if(e.singleton){var o=f++;i=p||(p=u(e)),s=d.bind(null,i,o,!1),n=d.bind(null,i,o,!0)}else i=u(e),s=function(t,e,i){var s=i.css,n=i.media,o=i.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),o&&btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=s;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(s))}}.bind(null,i,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return s(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;s(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=n());var i=l(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var s=0;s<i.length;s++){var n=a(i[s]);r[n].references--}for(var o=l(t,e),u=0;u<i.length;u++){var h=a(i[u]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}i=o}}}},function(t,e,i){},function(t,e,i){"use strict";var s,n=this&&this.__extends||(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(0),r=i(1),a=i(2),l=i(3),u=function(t){function e(e){var i,s=t.call(this)||this,n=Object.assign({},o.defaultOptions,e);return s.validate(n),i=s.normalize(n,o.defaultOptions),s.setOptions(i),s}return n(e,t),e.prototype.update=function(t){var e=this.getOptions();this.validate(Object.assign({},e,t));var i=this.normalize(t,e);this.setOptions(i),this.notify({type:"NEW_DATA",options:this.getOptions()})},e.prototype.setEndByOffsetRacio=function(t){var e=this.findValueByOffsetRacio(t);e<this._begin&&(e=this._begin),this._end=e,this.notify({type:"NEW_VALUE",options:this.getOptions()})},e.prototype.setBeginByOffsetRacio=function(t){if(this._range){var e=this.findValueByOffsetRacio(t);e>this._end&&(e=this._end),this._begin=e,this.notify({type:"NEW_VALUE",options:this.getOptions()})}},e.prototype.findValueByOffsetRacio=function(t){var e;return e=t*(this._max-this._min),e=this._reverse?this._max-e:this._min+e,e=this.findClosestValue(e,this.getOptions())},e.prototype.getOptions=function(){return{begin:this._begin,end:this._end,range:this._range,min:this._min,max:this._max,step:this._step,customValues:this._customValues,reverse:this._reverse}},e.prototype.getWarnings=function(){return Object.assign({},this._warnings)},e.prototype.setOptions=function(t){this._begin=t.begin,this._end=t.end,this._range=t.range,this._min=t.min,this._max=t.max,this._step=t.step,this._customValues=t.customValues,this._reverse=t.reverse},e.prototype.validate=function(t){if(this._warnings={},this._warnings=l.validateModel(t),0!=Object.keys(this._warnings).length){var e=Object.assign({},this._warnings);this.notify({type:"WARNINGS",warnings:e})}},e.prototype.normalize=function(t,e){var i,s,n=(t=Object.assign({},e,t)).begin,o=t.end,r=t.range,a=t.min,l=t.max,u=t.step,h=t.reverse,c=t.customValues;return(this._warnings.customValuesIsNotArray||this._warnings.customValuesIsTooSmall)&&(c=void 0),c&&(a=0,l=c.length-1),a=this.normalizeNumber(a,e.min),l=this.normalizeNumber(l,e.max),u=this.normalizeNumber(u,e.step),this._warnings.minIsOverMax&&(a=(i=[l,a])[0],l=i[1]),this._warnings.minIsEqualToMax&&(a=e.min,l=e.max),(this._warnings.stepIsNull||this._warnings.tooBigStep)&&(u=1),u=Math.abs(u),h=!!h,r=!!r,this._warnings.beginIsOverEnd&&(n=(s=[o,n])[0],o=s[1]),o=this.normalizeNumber(o,l),o=this.findClosestValue(o,t),r?(n=this.normalizeNumber(n,a),n=this.findClosestValue(n,t)):n=a,{begin:n,end:o,range:r,min:a,max:l,step:u,reverse:h,customValues:c}},e.prototype.normalizeNumber=function(t,e){var i=t;return a.isNumeric(t)||(i=e),i=Math.trunc(+i)},e.prototype.findClosestValue=function(t,e){var i,s,n=e.min,o=e.max,r=e.step,a=e.reverse;return t<=n?n:t>=o?o:(a?(i=o-Math.trunc((o-t)/r)*r-r,t=t<(s=o-Math.trunc((o-t)/r)*r)-(s-(i=i>n?i:n))/2?i:s):t=t<(i=Math.trunc((t-n)/r)*r)+((s=(s=Math.trunc((t-n)/r)*r+r)<o?s:o)-i)/2?i:s,t)},e}(r.Observable);e.default=u},function(t,e,i){"use strict";var s,n=this&&this.__extends||(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=i(0),r=i(1),a=i(2),l=i(3),u=function(t){function e(e,i){var s=t.call(this)||this;return e=Object.assign(o.defaultOptions,e),s.validate(e),s._slider=i,s._slider.classList.add("slider"),s.build(e),s}return n(e,t),e.prototype.update=function(t){this.setThumbs(t),this.setBarPosition(),(this._tooltip||this._tooltipFirst)&&this.setTooltipValues(t)},e.prototype.rerender=function(t){t=Object.assign({},this.getOptions(),t),this.validate(t),this.rebuild(t)},e.prototype.getOptions=function(){var t=!!this._tooltip||!!this._tooltipFirst,e=!!this._scale;return{length:this._length,vertical:this._vertical,tooltip:t,scale:e}},e.prototype.getWarnings=function(){return Object.assign({},this._warnings)},e.prototype.handleThumbDown=function(t){t.preventDefault(),t.stopPropagation(),this._activeThumb=t.currentTarget,document.addEventListener("mousemove",this.handleThumbMove),document.addEventListener("mouseup",this.handleThumbUp),document.addEventListener("touchmove",this.handleThumbMove),document.addEventListener("touchend",this.handleThumbUp)},e.prototype.handleThumbMove=function(t){var e,i=this.getLengthInPx(),s=this.getOffsetInPx();e=((t.touches?this._vertical?t.touches[0].clientY:t.touches[0].clientX:this._vertical?t.clientY:t.clientX)-s)/i,this._activeThumb==this._thumbLast?this.notify({type:"LAST_THUMB_MOVED",offsetRacio:e}):this.notify({type:"FIRST_THUMB_MOVED",offsetRacio:e})},e.prototype.handleSliderClick=function(t){var e,i,s=this.getLengthInPx(),n=this.getOffsetInPx();if(e=((t.touches?this._vertical?t.touches[0].clientY:t.touches[0].clientX:this._vertical?t.clientY:t.clientX)-n)/s,this._thumbFirst.classList.contains("slider__thumb_disabled"))i=!0;else if(this._thumbLast.classList.contains("slider__thumb_disabled"))i=!1;else{var o=this._vertical?"top":"left",r=parseInt(this._thumbFirst.style[o]),a=parseInt(this._thumbLast.style[o]);i=Math.abs(r/100-e)>Math.abs(a/100-e)}i?this.notify({type:"LAST_THUMB_MOVED",offsetRacio:e}):this.notify({type:"FIRST_THUMB_MOVED",offsetRacio:e})},e.prototype.handleThumbUp=function(t){document.removeEventListener("mouseup",this.handleThumbUp),document.removeEventListener("mousemove",this.handleThumbMove),document.removeEventListener("touchend",this.handleThumbUp),document.removeEventListener("touchmove",this.handleThumbMove),this._activeThumb=void 0},e.prototype.build=function(t){var e=this._length||o.defaultOptions.length;this._length=this.getValidLength(t.length,e),t.vertical?(this._vertical=!0,this._slider.style.height=this._length,this._slider.style.width=null,this._slider.classList.add("slider_vertical"),this._slider.classList.remove("slider_horizontal")):(this._vertical=!1,this._slider.style.width=this._length,this._slider.style.height=null,this._slider.classList.add("slider_horizontal"),this._slider.classList.remove("slider_vertical")),this._bar=this.buildNode(this._slider,"slider__bar"),this.buildThumbs(t),this.setBarPosition(),t.tooltip&&this.buildTooltips(t),t.scale&&this.buildScale(t),this.handleThumbDown=this.handleThumbDown.bind(this),this.handleThumbMove=this.handleThumbMove.bind(this),this.handleThumbUp=this.handleThumbUp.bind(this),this.handleSliderClick=this.handleSliderClick.bind(this),this._thumbFirst.addEventListener("mousedown",this.handleThumbDown),this._thumbFirst.addEventListener("touchstart",this.handleThumbDown),this._thumbLast.addEventListener("mousedown",this.handleThumbDown),this._thumbLast.addEventListener("touchstart",this.handleThumbDown),this._slider.addEventListener("click",this.handleSliderClick)},e.prototype.rebuild=function(t){var e=this.getOptions();for(var i in t=Object.assign({},e,t),this)if("_slider"!=i)try{this[i]=this.removeNode(this[i])}catch(t){}this.build(t)},e.prototype.validate=function(t){if(this._warnings={},this._warnings=l.validateView(t),0!=Object.keys(this._warnings).length){var e=Object.assign({},this._warnings);this.notify({type:"WARNINGS",warnings:e})}},e.prototype.buildThumbs=function(t){var e=t.range,i=t.reverse;this._thumbFirst=this.buildNode(this._slider,"slider__thumb","slider__thumb_first"),this._thumbLast=this.buildNode(this._slider,"slider__thumb","slider__thumb_last"),e||(i?this._thumbLast.classList.add("slider__thumb_disabled"):this._thumbFirst.classList.add("slider__thumb_disabled")),this.setThumbs(t)},e.prototype.setThumbs=function(t){var e=t.begin,i=t.end,s=t.reverse,n=this.findThumbPosition(e,t),o=this.findThumbPosition(i,t);s?(this.setThumbPosition(this._thumbFirst,o),this.setThumbPosition(this._thumbLast,n)):(this.setThumbPosition(this._thumbFirst,n),this.setThumbPosition(this._thumbLast,o))},e.prototype.setBarPosition=function(){var t,e,i=this._vertical?"top":"left",s=this._vertical?"height":"width";t=this._thumbFirst.style[i],e=this._thumbLast.style[i].slice(0,-1)-this._thumbFirst.style[i].slice(0,-1)+"%",this._bar.style[i]=t,this._bar.style[s]=e},e.prototype.buildTooltips=function(t){this._tooltipFirst=this.buildNode(this._thumbFirst,"slider__tooltip","slider__tooltip_first"),this._tooltipLast=this.buildNode(this._thumbLast,"slider__tooltip","slider__tooltip_last"),this.setTooltipValues(t)},e.prototype.buildScale=function(t){var e,i,s,n,o=t.min,r=t.max,l=t.step,u=t.reverse,h=t.customValues,c=r-o;(e=document.createElement("div")).classList.add("slider__scale");for(var d=0;d<=a.getNumberOfSteps(o,r,l);d++)u?(s=r-l*d,s=Math.max(s,o)):(s=o+l*d,s=Math.min(s,r)),n=(n=d*l<c?d*l:c)/c*100+"%",s=h?h[s]:s,(i=document.createElement("div")).classList.add("slider__scale-division"),i.innerHTML='<span class="slider__scale-division-text">'+s+"</span>",t.vertical?i.style.top=n:i.style.left=n,e.append(i);this._slider.prepend(e),this._scale=e},e.prototype.setTooltipValues=function(t){var e=t.begin,i=t.end,s=t.reverse,n=t.customValues,o=n?n[e]:e,r=n?n[i]:i;s?(this._tooltipFirst.textContent=r,this._tooltipLast.textContent=o):(this._tooltipFirst.textContent=o,this._tooltipLast.textContent=r)},e.prototype.setThumbPosition=function(t,e){this._vertical?(t.style.left=null,t.style.top=e):(t.style.top=null,t.style.left=e),this._thumbFirst&&(this._vertical||("100%"==this._thumbFirst.style.left||"100%"==this._thumbFirst.style.top?this._thumbFirst.style.zIndex="1":this._thumbFirst.style.zIndex=null))},e.prototype.findThumbPosition=function(t,e){var i=e.min,s=e.max;return e.reverse?(s-t)/(s-i)*100+"%":(t-i)/(s-i)*100+"%"},e.prototype.removeNode=function(t){t.remove()},e.prototype.buildNode=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];for(var s=document.createElement("div"),n=1;n<arguments.length;n++)s.classList.add(arguments[n]);return t.append(s),s},e.prototype.getValidLength=function(t,e){var i=(""+t).match(/^\d{1,3}[.,]?\d*(px|em|rem|%|vh|vw)?$/i);return i&&a.isNumeric(i[0])?i[0].toLowerCase().replace(",",".")+"px":i?i[0].toLowerCase().replace(",","."):e},e.prototype.getLengthInPx=function(){return this._vertical?this._slider.offsetHeight:this._slider.offsetWidth},e.prototype.getOffsetInPx=function(){return this._vertical?this._slider.getBoundingClientRect().top:this._slider.getBoundingClientRect().left},e}(r.Observable);e.default=u},function(t,e,i){"use strict";var s,n=this&&this.__extends||(s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,i){var s=t.call(this)||this;s._model=e,s._view=i;var n=s;return s._model.subscribe(function(t){switch(t.type){case"NEW_VALUE":n._view.update(t.options),n.notify(n.getOptions())}}),s._view.subscribe(function(t){switch(t.type){case"LAST_THUMB_MOVED":n._model.getOptions().reverse?n._model.setBeginByOffsetRacio(t.offsetRacio):n._model.setEndByOffsetRacio(t.offsetRacio);break;case"FIRST_THUMB_MOVED":n._model.getOptions().reverse?n._model.setEndByOffsetRacio(t.offsetRacio):n._model.setBeginByOffsetRacio(t.offsetRacio)}}),s}return n(e,t),e.prototype.update=function(t){var e=!1,i=!1;["value","min","max","step","reverse","range","customValues"].forEach(function(i){t.hasOwnProperty(i)&&(e=!0)}),e&&(this._model.update(t),i=!0);if(["length","vertical","tooltip","scale"].forEach(function(e){t.hasOwnProperty(e)&&(i=!0)}),i&&(t=Object.assign(t,this._model.getOptions()),this._view.rerender(t)),e||i){var s=this.getWarnings();0!=Object.keys(s).length&&(s=void 0),this.notify(this.getOptions(),s)}},e.prototype.getOptions=function(){return Object.assign({},this._model.getOptions(),this._view.getOptions())},e.prototype.getWarnings=function(){return Object.assign({},this._model.getWarnings(),this._view.getWarnings())},e}(i(1).ObservablePresenter);e.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,